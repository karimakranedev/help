<?php

namespace {{ namespace }};


use {{ model_fqcn }};
use Illuminate\Auth\Access\HandlesAuthorization;
use Illuminate\Auth\Access\Response;
use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Contracts\Auth\Access\Authorizable;

class {{ modelPolicy }}
{
    use HandlesAuthorization;

    /**
     * Determine whether the authorizable can view any models.
     *
     * @param Authorizable $authorizable
     * @return Response|bool
     * @throws AuthorizationException
     */
    public function viewAny(Authorizable $authorizable):Response|bool
    {
        return $authorizable->can('{{ ViewAny }}');
    }

    /**
     * Determine whether the authorizable can view the model.
     *
     * @param Authorizable $authorizable
     * @param  {{ model_name }} ${{ model_variable }}
     * @return Response|bool
     * @throws AuthorizationException
     */
    public function view(Authorizable $authorizable, {{ model_name }} ${{ model_variable }}):Response|bool
    {
        return $authorizable->can('{{ View }}');
    }

    /**
     * Determine whether the authorizable can create models.
     *
     * @param Authorizable $authorizable
     * @return Response|bool
     * @throws AuthorizationException

     */
    public function create(Authorizable $authorizable):Response|bool
    {
        return $authorizable->can('{{ Create }}');
    }

    /**
     * Determine whether the Authorizable can update the model.
     *
     * @param Authorizable $authorizable
     * @param  {{ model_name }} ${{ model_variable }}
     * @return Response|bool
     * @throws AuthorizationException
     */
    public function update(Authorizable $authorizable, {{ model_name }} ${{ model_variable }}):Response|bool
    {
        return $authorizable->can('{{ Update }}');
    }

    /**
     * Determine whether the Authorizable  can delete the model.
     *
     * @param Authorizable $authorizable
     * @param  {{ model_name }}  ${{ model_variable }}
     * @return Response|bool
     * @throws AuthorizationException
     */
    public function delete(Authorizable $authorizable, {{ model_name }} ${{ model_variable }}):Response|bool
    {
        return $authorizable->can('{{ Delete }}');
    }

    /**
     * Determine whether the Authorizable can bulk delete.
     *
     * @param Authorizable $authorizable
     * @return Response|bool
     * @throws AuthorizationException
     */
    public function deleteAny(Authorizable $authorizable):Response|bool
    {
        return $authorizable->can('{{ DeleteAny }}');
    }

    /**
     * Determine whether the Authorizable can permanently delete.
     *
     * @param Authorizable $authorizable
     * @param  {{ model_name }}  ${{ model_variable }}
     * @return Response|bool
     * @throws AuthorizationException
     */
    public function forceDelete(Authorizable $authorizable, {{ model_name }} ${{ model_variable }}):Response|bool
    {
        return $authorizable->can('{{ ForceDelete }}');
    }

    /**
     * Determine whether the Authorizable can permanently bulk delete.
     *
     * @param Authorizable $authorizable
     * @return Response|bool
     * @throws AuthorizationException
     */
    public function forceDeleteAny(Authorizable $authorizable):Response|bool
    {
        return $authorizable->can('{{ ForceDeleteAny }}');
    }

    /**
     * Determine whether the Authorizable can restore.
     *
     * @param Authorizable $authorizable
     * @param  {{ model_name }}  ${{ model_variable }}
     * @return Response|bool
     * @throws AuthorizationException
     */
    public function restore(Authorizable $authorizable, {{ model_name }} ${{ model_variable }}):Response|bool
    {
        return $authorizable->can('{{ Restore }}');
    }

    /**
     * Determine whether the Authorizable can bulk restore.
     *
     * @param Authorizable $authorizable
     * @return Response|bool
     * @throws AuthorizationException
     */
    public function restoreAny(Authorizable $authorizable):Response|bool
    {
        return $authorizable->can('{{ RestoreAny }}');
    }

    /**
     * Determine whether the Authorizable can replicate.
     *
     * @param Authorizable $authorizable
     * @param  {{ model_name }}  ${{ model_variable }}
     * @return Response|bool
     * @throws AuthorizationException
     */
    public function replicate(Authorizable $authorizable, {{ model_name }} ${{ model_variable }}):Response|bool
    {
        return $authorizable->can('{{ Replicate }}');
    }

    /**
     * Determine whether the Authorizable can reorder.
     *
     * @param Authorizable $authorizable
     * @return Response|bool
     * @throws AuthorizationException
     */
    public function reorder(Authorizable $authorizable):Response|bool
    {
        return $authorizable->can('{{ Reorder }}');
    }

}
